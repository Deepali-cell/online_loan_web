// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LoanApplication {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  loanAmount  Int
  loanPurpose String
  loanTerm    Int
  status      String @default("Pending") // "Pending" | "Approved" | "Rejected"

  appliedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            Int     @id @default(autoincrement())
  fullName      String
  email         String  @unique
  phoneNumber   String  @unique
  password      String // hashed
  city          String
  state         String
  country       String
  admin         Boolean @default(false)
  aadhaarNumber String  @unique
  panNumber     String  @unique

  loanApplications LoanApplication[]
  documents        Documents[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Account   Account[]
  // Session   Session[]
}

model Documents {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  publicId  String
  userId    Int
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

// model Account {
//   id                Int     @id @default(autoincrement())
//   userId            Int
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           Int      @id @default(autoincrement())
//   sessionToken String   @unique
//   userId       Int
//   expires      DateTime

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
